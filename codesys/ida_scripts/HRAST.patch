diff --git a/HRAST.py b/HRAST.py
index 228d3b4..7d33f8d 100644
--- a/HRAST.py
+++ b/HRAST.py
@@ -63,7 +63,7 @@ def reLOAD():
     reload(ready_patterns)
     used_pats = []
     for i in ready_patterns.PATTERNS:
-        print i[0]
+        print(i[0])
         used_pats.append((eval(i[0], globals(), locals()), i[1], i[2]))
 
 
@@ -102,4 +102,4 @@ def hr_remove():
 
 
 if __name__ == "__main__":    
-    print idaapi.install_hexrays_callback(hexrays_events_callback_m)
+    print(idaapi.install_hexrays_callback(hexrays_events_callback_m))
diff --git a/Matcher.py b/Matcher.py
index 40cadeb..383949d 100644
--- a/Matcher.py
+++ b/Matcher.py
@@ -26,7 +26,7 @@ class SavedMemRef(object):
 
 class SavedCTX(object):
     """Class which holds all collected context"""
-    def __init__(self, fcn):
+    def __init__(self, fcn, extra_ctx):
         self.names = fcn.lvars
         self.fcn = fcn
         self.obj = {}
@@ -34,6 +34,7 @@ class SavedCTX(object):
         self.memref = {}
         self.saved_insns = []
         self.saved_expressions = {}
+        self.extra_ctx = extra_ctx
 
     def save_obj(self, key, ea, type):
         self.obj[key] = SavedObj(type, ea)
@@ -87,13 +88,13 @@ class SavedCTX(object):
 
 class Matcher(object):
 
-    def __init__(self, fcn, pattern):
+    def __init__(self, fcn, pattern, extra_ctx={}):
 
         self.pattern = pattern 
         self.node = 0
         self.replacer = None    
         self.cnt = None   
-        self.ctx = SavedCTX(fcn)
+        self.ctx = SavedCTX(fcn, extra_ctx)
         self.chain = False
         self.fcn = fcn
 
diff --git a/Patterns/Expressions.py b/Patterns/Expressions.py
index 15ebeba..30cc85a 100644
--- a/Patterns/Expressions.py
+++ b/Patterns/Expressions.py
@@ -1,8 +1,8 @@
 # -*- coding: utf-8 -*-
 
 import sys
-import Patterns as p
-import Nodes
+import HRAST.Patterns.Patterns as p
+import HRAST.Patterns.Nodes as Nodes
 
 
 class BindExpr(p.Pattern):
diff --git a/Patterns/Instructions.py b/Patterns/Instructions.py
index d5f7c4a..0415b98 100644
--- a/Patterns/Instructions.py
+++ b/Patterns/Instructions.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 
-from Patterns import *
+from HRAST.Patterns.Patterns import *
 
 
 class IfInst(object):
diff --git a/Patterns/Patterns.py b/Patterns/Patterns.py
index 4138698..cc8d95a 100644
--- a/Patterns/Patterns.py
+++ b/Patterns/Patterns.py
@@ -1,5 +1,5 @@
 # -*- coding: utf-8 -*-
-import traversal
+import HRAST.Patterns.traversal as traversal
 
 class Pattern(object):
 
diff --git a/Patterns/__init__.py b/Patterns/__init__.py
index 59fe35e..5d1a7f6 100644
--- a/Patterns/__init__.py
+++ b/Patterns/__init__.py
@@ -1,3 +1,3 @@
 #from Patterns import *
-from Expressions import *
-from Instructions import *
+from HRAST.Patterns.Expressions import *
+from HRAST.Patterns.Instructions import *
diff --git a/Patterns/traversal.py b/Patterns/traversal.py
index de2c5a5..11f58f3 100644
--- a/Patterns/traversal.py
+++ b/Patterns/traversal.py
@@ -1,5 +1,5 @@
 import ida_hexrays
-import Nodes
+import HRAST.Patterns.Nodes
 
 def is_inst(node):
     return type(node) == type(ida_hexrays.cinsn_t())
diff --git a/dumper.py b/dumper.py
index b7f1d5b..d5215af 100644
--- a/dumper.py
+++ b/dumper.py
@@ -10,12 +10,12 @@ BLOCK_TYPES = [
 
 def dump_function(fcn):
     val = dump_entry(fcn.body)
-    print val
+    print(val)
     for i in fcn.body.cblock:
-        print dump_entry(i)
+        print(dump_entry(i))
         inner = getattr(i, "c" + i.opname)
         if inner is not None:
-            print dump_entry(inner, 2)
+            print(dump_entry(inner, 2))
 
 
 def dump_entry(entry, lvl=1):
@@ -26,7 +26,7 @@ def dump_entry(entry, lvl=1):
             if getattr(entry, i) is not None:
                 res += "\n{}Have {}".format("\t" * lvl, i)
     except:
-        print dir(entry)
+        print(dir(entry))
     return res
 
 
diff --git a/ready_patterns.py b/ready_patterns.py
index c09502c..ec82de3 100644
--- a/ready_patterns.py
+++ b/ready_patterns.py
@@ -76,7 +76,7 @@ get_proc_addr = """Patterns.ExprInst(
 def getProc_addr(idx, ctx):
     import ida_bytes
     obj = ctx.get_obj("fcnPtr")
-    print "%x" % obj.addr
+    print("%x" % obj.addr)
     name = ctx.get_obj("fcnName")
     name_str = ida_bytes.get_strlit_contents(name.addr, -1, -1)
     ida_name.set_name(obj.addr, name_str)
@@ -110,17 +110,17 @@ def rename_struct_field_as_func_name(idx, ctx):
     import idc
     import ida_bytes
     obj = ctx.get_memref('stroff')
-    print "%x" % obj.ea
+    print("%x" % obj.ea
     ti = idaapi.opinfo_t()
     f = idc.GetFlags(obj.ea)
     if idaapi.get_opinfo(obj.ea, 0, f, ti):
         print("tid=%08x - %s" % (ti.tid, idaapi.get_struc_name(ti.tid)))
-    print "Offset: {}".format(obj.offset)
+    print("Offset: {}".format(obj.offset))
     import ida_struct
     obj2 = ctx.get_obj('fcn')
-    print "%x" % obj2.addr
+    print("%x" % obj2.addr)
     name_str = ida_name.get_name(obj2.addr)
-    print "Name {}".format(name_str)
+    print("Name {}".format(name_str))
     ida_struct.set_member_name(ida_struct.get_struc(ti.tid), obj.offset, name_str)
     return False
 
@@ -139,7 +139,7 @@ test_bind_expr = """Patterns.IfInst(Patterns.BindExpr('if_cond', Patterns.AnyPat
 def test_bind(idx, ctx):
     exprs = ctx.get_expr('if_cond')
     for i in exprs:
-        print i
+        print(i)
     return False
 
 
@@ -226,13 +226,13 @@ def xx(inst, ctx):
         GLOBAL = {}
         MAX = 0
         LAST_FCN_EA = ctx.fcn.entry_ea
-    print "{:x}".format(inst.ea)
+    print("{:x}".format(inst.ea))
     v = ctx.get_var('r')
     n = ctx.get_expr('n')[0]
     val = n.n._value & 0xff
     v_o = get_var_offset(ctx.fcn, v.idx)
-    print "Var offset from stack:", v_o
-    print val 
+    print("Var offset from stack:", v_o)
+    print(val)
     if v_o > MAX:
         MAX = v_o
     if val < 256:
@@ -247,7 +247,7 @@ def xx(inst, ctx):
         else:
 
             ret += GLOBAL[i]
-    print ret
+    print(ret)
 
 
 
@@ -272,7 +272,7 @@ def get_string_repr(obj, ctx):
             return repr(ida_bytes.get_strlit_contents(obj.obj_ea, 256, -1))
         else:
             name = ida_name.get_name(obj.obj_ea).split("@@")[0]
-            print name
+            print(name)
             if name[0] == ".":
                 name = name[1:]
             if "endl" in name:
@@ -284,19 +284,19 @@ def get_string_repr(obj, ctx):
         return ctx.get_var_name(obj.v.idx)
     # elif
     else:
-        print obj.opname
+        print(obj.opname)
     return ""
     
 
 def react_operator(idx, ctx):
-    print '%x' % (idx.ea)
+    print('%x' % (idx.ea))
     fcn_object = ctx.get_obj("function")
     """next line was working on ELF"""
     demangled = ida_name.demangle_name(ida_name.get_name(fcn_object.addr)[1:], 0)
     """next line was working on MACH-O"""
     #demangled = ida_name.demangle_name(ida_name.get_name(fcn_object.addr), 0)
     
-    print demangled
+    print(demangled)
     if "operator<<" in demangled:
         arg2 = ctx.get_expr('arg2')[0]
         arg1 = ctx.get_expr('arg1')[0]
@@ -324,13 +324,13 @@ operator_replacing2 = """Patterns.ExprInst(
 )"""
 
 def react_operator2(idx, ctx):
-    print '%x' % (idx.ea)
+    print('%x' % (idx.ea))
     fcn_object = ctx.get_obj("function")
     """next line was working on ELF"""
     demangled = ida_name.demangle_name(ida_name.get_name(fcn_object.addr)[1:], 0)
     """next line was working on MACH-O"""
     #demangled = ida_name.demangle_name(ida_name.get_name(fcn_object.addr), 0)
-    print demangled
+    print(demangled)
     if "operator<<" in demangled:
         arg1 = ctx.get_expr('arg1')[0]
         arg1_repr = get_string_repr(arg1, ctx)
@@ -379,15 +379,15 @@ string_deleter = """Patterns.IfInst(
 )""".format(ida_name.get_name_ea(0, "free_0"))
 
 def handle_string_destr(idx, ctx):
-    print '%x' % (idx.ea)
+    print('%x' % (idx.ea))
     var = ctx.get_var('len')
     var2 = ctx.get_var('ptr')
-    print var
+    print(var)
     off1 = get_var_offset(ctx.fcn, var.idx)
     off2 = get_var_offset(ctx.fcn, var2.idx)
-    print off1 - off2
+    print(off1 - off2)
     if off1 - off2 == 20:
-        print "[+] Found string destructor"
+        print("[+] Found string destructor")
         varexp = make_var_expr(var2.idx, var2.typ, var2.mba, arg=True)
         arglist = ida_hexrays.carglist_t()
         arglist.push_back(varexp)
@@ -426,7 +426,7 @@ Patterns.ExprInst(
 """
 
 def replace_dword_in_struct(idx, ctx):
-    print '%x' % idx.ea
+    print('%x' % idx.ea)
     struct_expr = ctx.get_expr('struct_part')[0]
     var = ctx.get_var("struct_var")
     values = ctx.get_expr('values')[0]
@@ -444,12 +444,12 @@ def replace_dword_in_struct(idx, ctx):
     while inner_offset < 4:
         memb = ida_struct.get_member(sptr, offset+inner_offset)
         if memb is None:
-            print "Not enought members!"
+            print("Not enought members!")
             is_suits = False
             break
         size = ida_struct.get_member_size(memb)
         if inner_offset + size  > 4:
-            print "Size fail!(%d bytes lenft but member size is %d)" % (4 - inner_offset, size)
+            print("Size fail!(%d bytes lenft but member size is %d)" % (4 - inner_offset, size))
             is_suits = False
             break
         if size == 1:
@@ -459,14 +459,14 @@ def replace_dword_in_struct(idx, ctx):
             val = N & 0xffff
             N = N >> 16
         else:
-            print "Unkn size"
+            print("Unkn size")
             is_suits = False
             break
         fields.append((inner_offset, val))
         inner_offset += size
         
     if is_suits is False:
-        print "Not suitable!"
+        print("Not suitable!")
         return
     inslist = []
     for i in fields:
diff --git a/traverse.py b/traverse.py
index e377d68..f7b266f 100644
--- a/traverse.py
+++ b/traverse.py
@@ -44,7 +44,7 @@ class FuncProcessor(object):
             return []
         elif opname == "goto":
             if self.DEBUG:
-                print "{}[+]Goto to label num {}".format(" " * ((shift + 1) * TAB_SPACES), node.cgoto.label_num)
+                print("{}[+]Goto to label num {}".format(" " * ((shift + 1) * TAB_SPACES), node.cgoto.label_num))
         elif opname == "while":
             self.traverse_expr(node.cwhile.expr, shift + 1)
             return [node.cwhile.body]
@@ -67,12 +67,12 @@ class FuncProcessor(object):
         elif opname == "asm":
             return None
         else:
-            print "[-] Got unexpected opname {}".format(node.opname)
+            print("[-] Got unexpected opname {}".format(node.opname))
             raise Exception('Got unexpected opname {}'.format(node.opname))
 
     def process_case(self, cas, shift):
         if type(cas) != ida_hexrays.ccase_t:
-            print "[-] Not an case!"
+            print("[-] Not an case!")
             return
         vals = []
         """TODO: When decompiling 32bit binaries values is not iterable"""
@@ -81,7 +81,7 @@ class FuncProcessor(object):
         #if not vals:
         #    vals = "default"
         if self.DEBUG:
-            print "{}[+]Got case {} num {}".format(" " * (shift * TAB_SPACES), cas.opname, str(vals))
+            print("{}[+]Got case {} num {}".format(" " * (shift * TAB_SPACES), cas.opname, str(vals)))
         fields = self.process_inst_and_get_next(cas, shift)
         if fields is None:
             return
@@ -91,17 +91,17 @@ class FuncProcessor(object):
     def traverse_function(self):
         fcnbody = self.fcn.body
         if type(fcnbody) != ida_hexrays.cinsn_t:
-            print "[-] Function body not an instruction!"
+            print("[-] Function body not an instruction!")
             return
         self.traverse_node(fcnbody)
 
     def traverse_node(self, node, shift=0):
         fired = False
         if type(node) != ida_hexrays.cinsn_t:
-            print "{}[-] Got not an instruction {}".format(" " * (shift * TAB_SPACES), node.opname)
+            print("{}[-] Got not an instruction {}".format(" " * (shift * TAB_SPACES), node.opname))
             return
         if self.DEBUG:
-            print "{}[+]Got instruction {}".format(" " * (shift * TAB_SPACES), node.opname)
+            print("{}[+]Got instruction {}".format(" " * (shift * TAB_SPACES), node.opname))
         if node.opname == "block":
             self.curr_cblock.append(node)
             self.need_reanalyze_cblock = False
@@ -110,7 +110,7 @@ class FuncProcessor(object):
                 if self.pattern.check_chain(node):
                     # TODO: possible inner hiding?
                     if self.pattern.is_finished():
-                        print "[+] Found pattern chain {}".format(node.opname)
+                        print("[+] Found pattern chain {}".format(node.opname))
                         self.pattern.set_cblk_and_node(self.curr_cblock[-1], node)
                         self.pattern.replace_if_need()
                         if not self.pattern.is_chain_observer():
@@ -123,7 +123,7 @@ class FuncProcessor(object):
                         return
             else:
                 if self.pattern.check(node):
-                    print "[+] Found pattern!"
+                    print("[+] Found pattern!")
                     self.pattern.set_node(node)
                     if self.pattern.replace_if_need() == True:
                         return
@@ -140,7 +140,7 @@ class FuncProcessor(object):
                 self.pattern.finish_cblock()
         if self.need_reanalyze_cblock:
             if self.DEBUG:
-                print "{}[+] Reanalyzing cblock after replacement".format(" " * (shift * TAB_SPACES))
+                print("{}[+] Reanalyzing cblock after replacement".format(" " * (shift * TAB_SPACES)))
             self.traverse_node(node, shift)
 
     TWO_OP = [
@@ -160,20 +160,20 @@ class FuncProcessor(object):
         opname = exp.opname
         if opname == "var":
             if self.DEBUG:
-                print "{}[+] Varname: {}".format(" " * ((shift + 1) * TAB_SPACES), self.fcn.lvars[exp.v.idx].name)
+                print("{}[+] Varname: {}".format(" " * ((shift + 1) * TAB_SPACES), self.fcn.lvars[exp.v.idx].name))
         elif opname == "memptr":
             self.traverse_expr(exp.x, shift + 1)
             if self.DEBUG:
-                print "{}[+] Offset: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.m)
-                print "{}[+] Size: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.ptrsize)
+                print("{}[+] Offset: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.m))
+                print("{}[+] Size: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.ptrsize))
         elif opname == "memref":
             self.traverse_expr(exp.x, shift + 1)
             if self.DEBUG:
-                print "{}[+] Offset: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.m)
+                print("{}[+] Offset: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.m))
         elif opname == "ptr":
             self.traverse_expr(exp.x, shift + 1)
             if self.DEBUG:
-                print "{}[+] Size: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.ptrsize)
+                print("{}[+] Size: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.ptrsize))
         elif opname in FuncProcessor.TWO_OP:
             self.traverse_expr(exp.x, shift + 1)
             self.traverse_expr(exp.y, shift + 1)
@@ -189,51 +189,51 @@ class FuncProcessor(object):
                 self.traverse_args(i, shift + 1)
         elif opname == "helper":
             if self.DEBUG:
-                print "{}[+] Helper: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.helper)
+                print("{}[+] Helper: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.helper))
         elif opname == "str":
             if self.DEBUG:
-                print "{}[+] String: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.string)
+                print("{}[+] String: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.string))
         elif opname == "obj":
             if self.DEBUG:
-                print "{}[+] EA: {:x}".format(" " * ((shift + 1) * TAB_SPACES), exp.obj_ea)
+                print("{}[+] EA: {:x}".format(" " * ((shift + 1) * TAB_SPACES), exp.obj_ea))
         elif opname == "num":
             if self.DEBUG:
-                print "{}[+] Number: {:x}".format(" " * ((shift + 1) * TAB_SPACES), exp.n._value)
+                print("{}[+] Number: {:x}".format(" " * ((shift + 1) * TAB_SPACES), exp.n._value))
         elif opname == "fnum":
             if self.DEBUG:
-                print "{}[+] Float number {}".format(" "* ((shift+1) * TAB_SPACES), ["{:x}".format(x) for x in exp.fpc.fnum])
+                print("{}[+] Float number {}".format(" "* ((shift+1) * TAB_SPACES), ["{:x}".format(x) for x in exp.fpc.fnum]))
         elif opname == "cast":
             if self.DEBUG:
-                print "{}[+] CastTo: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.type.dstr())
+                print("{}[+] CastTo: {}".format(" " * ((shift + 1) * TAB_SPACES), exp.type.dstr()))
             self.traverse_expr(exp.x, shift + 1)
         elif opname == "empty":
             pass
         elif opname == "sizeof":
             if self.DEBUG:
-                print "{}[+] sizeof".format(" " * ((shift + 1) * TAB_SPACES))
+                print("{}[+] sizeof".format(" " * ((shift + 1) * TAB_SPACES)))
             pass
         else:
-            print "[-] Got unknown expr {}".format(opname)
+            print("[-] Got unknown expr {}".format(opname))
             raise Exception('Got unknown expr {}'.format(opname))
 
     def traverse_args(self, arg, shift):
         if type(arg) != ida_hexrays.carg_t:
-            print "{}[-] Got not an argument. Fail ;[".format(" " * (shift * TAB_SPACES))
-            print type(arg)
+            print("{}[-] Got not an argument. Fail ;[".format(" " * (shift * TAB_SPACES)))
+            print(type(arg))
         if self.DEBUG:
-            print "{}[+] Got {} arg".format(" " * (shift * TAB_SPACES), arg.opname)
+            print("{}[+] Got {} arg".format(" " * (shift * TAB_SPACES), arg.opname))
         if self.expression_pattern is not None:
             if self.expression_pattern.check(arg):
-                print "[+] Found args pattern"
+                print("[+] Found args pattern")
         self.process_expr(arg, shift)
 
     def traverse_expr(self, exp, shift):
         if type(exp) != ida_hexrays.cexpr_t:
-            print "{}[-] Got not expression. Fail ;[".format(" " * (shift * TAB_SPACES))
-            print type(exp)
+            print("{}[-] Got not expression. Fail ;[".format(" " * (shift * TAB_SPACES)))
+            print(type(exp))
         if self.DEBUG:
-            print "{}[+] Got {} expr".format(" " * (shift * TAB_SPACES), exp.opname)
+            print("{}[+] Got {} expr".format(" " * (shift * TAB_SPACES), exp.opname))
         if self.expression_pattern is not None:
             if self.expression_pattern.check(exp):
-                print "[+] Found expr pattern"
+                print("[+] Found expr pattern")
         self.process_expr(exp, shift)
